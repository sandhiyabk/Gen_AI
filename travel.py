# -*- coding: utf-8 -*-
"""travel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tFTC577ZGxnr1xxOUi4QuD7QUlwG35BP
"""

# Mood-Based Travel Caption Generator
# Google Colab-compatible full project

# ------------------------------
# üîß STEP 0: Install dependencies
# ------------------------------
!pip install openai pillow gradio --quiet

# ------------------------------
# üì∏ STEP 1: Upload Image & Extract Metadata
# ------------------------------
import PIL.Image
import PIL.ExifTags
import gradio as gr
import requests
import random
import os

# Simulate OpenWeatherMap response (use real API if you have the key)
def get_weather_by_city(city):
    # You can replace this with OpenWeatherMap API call
    weather_options = ["Sunny", "Rainy", "Cloudy", "Foggy", "Snowy", "Windy"]
    return random.choice(weather_options)

# ------------------------------
# üß† STEP 2: RNN Caption Generator (Simplified)
# ------------------------------
def generate_caption(location, weather, mood):
    # Template-based simulated RNN output (for demo purposes)
    base = f"{weather} vibes in {location}, feeling {mood}"
    caption_templates = {
        ("Rainy", "Cozy"): [
            "Wrapped in mist and memories ‚òÅÔ∏è",
            "Chai, clouds and calm in the hills üçµüåßÔ∏è",
            "Monsoon whispers and mountain coffee ‚õ∞Ô∏è"
        ],
        ("Sunny", "Adventurous"): [
            "Chasing sunshine and stories ‚òÄÔ∏èüó∫Ô∏è",
            "Golden hours, endless roads ‚òÄÔ∏èüöó",
            "Adventure wrapped in sunbeams üîÜ"
        ],
        ("Foggy", "Nostalgic"): [
            "Tea-scented winds and silent roads üå´Ô∏è",
            "Every fog holds a memory üçÉ",
            "Faded paths, clear feelings üõ§Ô∏è"
        ]
    }
    # Fallback
    return random.choice(caption_templates.get((weather, mood), [base]))

# ------------------------------
# üì¶ STEP 3: Gradio Interface
# ------------------------------
def process(image, location, mood):
    try:
        # Get weather for demo (simulate)
        weather = get_weather_by_city(location)
        caption = generate_caption(location, weather, mood)

        # Resize image for display
        image = image.resize((512, 384))

        return caption, image
    except Exception as e:
        return f"Error: {e}", None

locations = ["Manali", "Goa", "Ooty", "Chennai", "Munnar"]
moods = ["Cozy", "Adventurous", "Nostalgic", "Romantic", "Playful"]

demo = gr.Interface(
    fn=process,
    inputs=[
        gr.Image(type="pil", label="Upload Travel Photo"),
        gr.Dropdown(locations, label="Where was this taken?"),
        gr.Dropdown(moods, label="What mood best fits?")
    ],
    outputs=[
        gr.Textbox(label="Generated Caption ‚ú®"),
        gr.Image(label="Preview")
    ],
    title="üì∏ AI-Powered Travel Caption Generator",
    description="Upload a travel photo, select location and mood, and get an Insta-style poetic caption."
)

demo.launch()

from deep_translator import GoogleTranslator

# Get input from user
text = input("Enter a sentence in English: ")

# Translate from English to English
try:
    translated_text = GoogleTranslator(source='en', target='en').translate(text)
    print("Translated (standardized) text:", translated_text)
except Exception as e:
    print("Translation failed:", e)

def mood_to_heading(mood: str) -> str:
    prompts = {
      'happy': "a happy upbeat piano music",
      'sad': "a slow sad ambient piece",
      'romantic': "romantic soft melody",
      'aggressive': "energetic rock riff",
      # default
    }
    return prompts.get(mood, "calm playlist music")

def text_to_music(text: str):
    mood = detect_mood(text)
    prompt = mood_to_heading(mood)
    # Using MusicGen API:
    audio = musicgen.generate(prompt, duration=30)
    with open(f"{mood}.wav", "wb") as out: out.write(audio)
    print("Generated:", mood, "->", prompt)

# ‚úÖ Install necessary libraries
!pip install -q gradio deep-translator

# ‚úÖ Import packages
import gradio as gr
from deep_translator import GoogleTranslator
import random
from PIL import Image
import io

# ‚úÖ Mood-based caption templates
caption_templates = {
    "Romantic": [
        "Lost in the colors of {place}, where every breath whispered love.",
        "{place} wrapped us in a warm embrace, one sunset at a time."
    ],
    "Adventurous": [
        "To the peaks of {place}, where the winds cheer and paths dare.",
        "Wandered wild through {place}, where every turn was a thrill."
    ],
    "Cozy": [
        "Sipped dreams in {place}, wrapped in a blanket of clouds.",
        "{place} felt like a lullaby hummed by the hills."
    ],
    "Magical": [
        "{place} glowed like a dream ‚Äî stardust in every corner.",
        "In {place}, magic wasn't illusion, it was the moment."
    ]
}

# ‚úÖ Mood-to-music suggestions (use royalty-free preview links)
music_links = {
    "Romantic": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
    "Adventurous": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3",
    "Cozy": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3",
    "Magical": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3"
}

# ‚úÖ Generate caption
def generate_post(image, place, mood, lang_code):
    if not image or not place or not mood:
        return "Please provide all inputs.", None, None

    caption = random.choice(caption_templates[mood]).format(place=place)

    # Poetic Translation
    try:
        translated = GoogleTranslator(source='auto', target=lang_code).translate(caption)
    except Exception:
        translated = "[Translation Failed]"

    # Music URL
    song_url = music_links.get(mood, None)

    final_output = f"üìç **{place}**\nüé≠ Mood: *{mood}*\n\nüìù **Original Caption**: {caption}\n\nüåê **Poetic Translation**: {translated}"

    return final_output, image, song_url

# ‚úÖ Build Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("üåç **AI Travel InstaPost Generator**")
    gr.Markdown("Upload a travel photo, get a poetic caption and translation, with mood-based music üé∂")

    with gr.Row():
        with gr.Column(scale=1):
            image_input = gr.Image(label="Upload Travel Photo", type="pil")
            place_input = gr.Textbox(label="Where was this taken?")
            mood_input = gr.Dropdown(label="What mood fits best?", choices=list(caption_templates.keys()))
            lang_input = gr.Dropdown(label="Translate Caption To", choices=[
                "hi", "ta", "fr", "es", "ja", "zh", "ko"
            ], value="hi")
            submit_btn = gr.Button("Generate Post")

        with gr.Column(scale=1):
            output_text = gr.Markdown(label="Generated Post")
            image_output = gr.Image(label="Preview")
            audio_output = gr.Audio(label="Mood-based Music", interactive=False)

    submit_btn.click(fn=generate_post, inputs=[image_input, place_input, mood_input, lang_input],
                     outputs=[output_text, image_output, audio_output])

# ‚úÖ Launch
demo.launch()

# ‚úÖ Install necessary libraries
!pip install -q gradio deep-translator

# ‚úÖ Import packages
import gradio as gr
from deep_translator import GoogleTranslator
import random

# ‚úÖ Mood-based caption templates
caption_templates = {
    "Romantic": [
        "Lost in the colors of {place}, where every breath whispered love.",
        "{place} wrapped us in a warm embrace, one sunset at a time."
    ],
    "Adventurous": [
        "To the peaks of {place}, where the winds cheer and paths dare.",
        "Wandered wild through {place}, where every turn was a thrill."
    ],
    "Cozy": [
        "Sipped dreams in {place}, wrapped in a blanket of clouds.",
        "{place} felt like a lullaby hummed by the hills."
    ],
    "Magical": [
        "{place} glowed like a dream ‚Äî stardust in every corner.",
        "In {place}, magic wasn't illusion, it was the moment."
    ]
}

# ‚úÖ Mood-to-music suggestions
music_links = {
    "Romantic": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
    "Adventurous": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3",
    "Cozy": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3",
    "Magical": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3"
}

# ‚úÖ Generate caption with English ‚Üí Tamil translation
def generate_post(image, place, mood, lang_code):
    if not image or not place or not mood:
        return "Please provide all inputs.", None, None

    # 1. Pick template and format
    caption_en = random.choice(caption_templates[mood]).format(place=place)

    # 2. Translate caption into target language (e.g., Tamil 'ta')
    try:
        caption_ta = GoogleTranslator(source='en', target=lang_code).translate(caption_en)
    except Exception:
        caption_ta = "[Translation failed]"

    # 3. Retrieve mood music
    song_url = music_links.get(mood)

    # 4. Assemble final output
    output = (
        f"üìç **{place}**\n"
        f"üé≠ Mood: *{mood}*\n\n"
        f"üìù **English Caption**: {caption_en}\n\n"
        f"üåê **Translated Caption** ({lang_code}): {caption_ta}"
    )
    return output, image, song_url

# ‚úÖ Build Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("üåç **AI Travel InstaPost Generator**")
    gr.Markdown("Upload a travel photo and get a poetic English caption automatically translated into Tamil (or another language), with mood-based music üé∂")

    with gr.Row():
        with gr.Column(scale=1):
            image_input = gr.Image(label="Upload Travel Photo", type="pil")
            place_input = gr.Textbox(label="Where was this taken?")
            mood_input = gr.Dropdown(label="What mood fits best?", choices=list(caption_templates.keys()))
            lang_input = gr.Dropdown(
                label="Translate Caption To",
                choices=[("Tamil", "ta"), ("Hindi", "hi"), ("French", "fr"), ("Spanish", "es")],
                value="ta"
            )
            submit_btn = gr.Button("Generate Post")

        with gr.Column(scale=1):
            output_text = gr.Markdown(label="Generated Post")
            image_output = gr.Image(label="Preview")
            audio_output = gr.Audio(label="Mood-based Music", interactive=False)

    submit_btn.click(
        fn=generate_post,
        inputs=[image_input, place_input, mood_input, lang_input],
        outputs=[output_text, image_output, audio_output]
    )

# ‚úÖ Launch app
demo.launch()

